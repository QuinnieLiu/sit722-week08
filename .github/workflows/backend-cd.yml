name: CD - Deploy Backend Services to AKS

on:
  # Manual trigger with inputs
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: '<aks_cluster_name>'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: '<resource_group_name>'
      aks_acr_name:
        description: 'Name of ACR'
        required: true
        default: '<acr_name>'

  # Automatic trigger after successful backend CI
  workflow_run:
    workflows: ["Backend CI - Test, Build and Push Images to ACR"]
    types:
      - completed
    branches:
      - main  # Only auto-deploy from main branch

  # Can be called by other workflows
  workflow_call:
    inputs:
      aks_cluster_name:
        required: true
        type: string
        default: '<aks_cluster_name>'
      aks_resource_group:
        required: true
        type: string
        default: '<resource_group_name>'
      aks_acr_name:
        required: true
        type: string
        default: '<acr_name>'

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production
    # Only run if the preceding workflow succeeded (for workflow_run) or always run for manual/workflow_call
    if: github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success'
    
    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP: ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set deployment parameters
        id: set_params
        run: |
          # Use inputs from different event types
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "aks_cluster_name=${{ github.event.inputs.aks_cluster_name }}" >> $GITHUB_ENV
            echo "aks_resource_group=${{ github.event.inputs.aks_resource_group }}" >> $GITHUB_ENV
            echo "aks_acr_name=${{ github.event.inputs.aks_acr_name }}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "workflow_call" ]]; then
            echo "aks_cluster_name=${{ inputs.aks_cluster_name }}" >> $GITHUB_ENV
            echo "aks_resource_group=${{ inputs.aks_resource_group }}" >> $GITHUB_ENV
            echo "aks_acr_name=${{ inputs.aks_acr_name }}" >> $GITHUB_ENV
          else
            # For workflow_run, use default values (would typically be set in secrets)
            echo "aks_cluster_name=${{ secrets.AKS_CLUSTER_NAME || '<aks_cluster_name>' }}" >> $GITHUB_ENV
            echo "aks_resource_group=${{ secrets.AKS_RESOURCE_GROUP || '<resource_group_name>' }}" >> $GITHUB_ENV
            echo "aks_acr_name=${{ secrets.ACR_NAME || '<acr_name>' }}" >> $GITHUB_ENV
          fi

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials --resource-group ${{ env.aks_resource_group }} --name ${{ env.aks_cluster_name }} --overwrite-existing

      - name: Verify ACR Integration
        run: |
          echo "âœ… ACR was attached during AKS cluster creation"
          echo "Verifying ACR integration..."
          az aks check-acr --name ${{ env.aks_cluster_name }} --resource-group ${{ env.aks_resource_group }} --acr ${{ env.aks_acr_name }}

      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          echo "Deploying backend infrastructure..."
          cd k8s/
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml

      - name: Deploy Backend Microservices (Product, Order)
        run: |
          echo "Deploying backend microservices..."
          cd k8s/
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml
      
      - name: Wait for Backend LoadBalancer IPs
        run: |
          echo "Waiting for Product, Order LoadBalancer IPs to be assigned (up to 5 minutes)..."
          PRODUCT_IP=""
          ORDER_IP=""
          
          for i in $(seq 1 60); do
            echo "Attempt $i/60 to get IPs..."
            PRODUCT_IP=$(kubectl get service product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl get service order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "All backend LoadBalancer IPs assigned!"
              echo "Product Service IP: $PRODUCT_IP"
              echo "Order Service IP: $ORDER_IP"
              break
            fi
            sleep 5 # Wait 5 seconds before next attempt
          done
          
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Error: One or more LoadBalancer IPs not assigned after timeout."
            exit 1 # Fail the job if IPs are not obtained
          fi
          
          # These are environment variables for subsequent steps in the *same job*
          # And used to set the job outputs
          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT
      
      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Logout from Azure
        run: az logout
